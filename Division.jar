public class QuickSortEjemplo {

    // Método principal
    public static void main(String[] args) {
        int[] arreglo = {34, 7, 23, 32, 5, 62, 32, 12};

        System.out.println("Arreglo original:");
        imprimirArreglo(arreglo);

        quickSort(arreglo, 0, arreglo.length - 1);

        System.out.println("\nArreglo ordenado con Quick Sort:");
        imprimirArreglo(arreglo);
    }

    // Método Quick Sort (Divide y Vencerás)
    public static void quickSort(int[] arr, int inicio, int fin) {
        if (inicio < fin) {
            int indicePivote = particionar(arr, inicio, fin); // divide
            quickSort(arr, inicio, indicePivote - 1);          // vencer (lado izquierdo)
            quickSort(arr, indicePivote + 1, fin);             // vencer (lado derecho)
        }
    }

    // Método para dividir el arreglo según un pivote
    public static int particionar(int[] arr, int inicio, int fin) {
        int pivote = arr[fin]; // elegimos el último elemento como pivote
        int i = inicio - 1;

        for (int j = inicio; j < fin; j++) {
            if (arr[j] <= pivote) { // si el elemento actual es menor o igual al pivote
                i++;
                intercambiar(arr, i, j);
            }
        }

        intercambiar(arr, i + 1, fin);
        return i + 1; // devuelve la posición final del pivote
    }

    // Método auxiliar para intercambiar elementos
    public static void intercambiar(int[] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }

    // Método para imprimir el arreglo
    public static void imprimirArreglo(int[] arr) {
        for (int num : arr) {
            System.out.print(num + " ");
        }
        System.out.println();
    }
}
